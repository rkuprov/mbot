// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: types.proto

package mbotpbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	mbotpb "github.com/rkuprov/mbot/pkg/mbotpb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MBotServerName is the fully-qualified name of the MBotServer service.
	MBotServerName = "MBotServer"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MBotServerCreateCustomerProcedure is the fully-qualified name of the MBotServer's CreateCustomer
	// RPC.
	MBotServerCreateCustomerProcedure = "/MBotServer/CreateCustomer"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	mBotServerServiceDescriptor              = mbotpb.File_types_proto.Services().ByName("MBotServer")
	mBotServerCreateCustomerMethodDescriptor = mBotServerServiceDescriptor.Methods().ByName("CreateCustomer")
)

// MBotServerClient is a client for the MBotServer service.
type MBotServerClient interface {
	CreateCustomer(context.Context, *connect.Request[mbotpb.CreateCustomerRequest]) (*connect.Response[mbotpb.CreateCustomerReply], error)
}

// NewMBotServerClient constructs a client for the MBotServer service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMBotServerClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MBotServerClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &mBotServerClient{
		createCustomer: connect.NewClient[mbotpb.CreateCustomerRequest, mbotpb.CreateCustomerReply](
			httpClient,
			baseURL+MBotServerCreateCustomerProcedure,
			connect.WithSchema(mBotServerCreateCustomerMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// mBotServerClient implements MBotServerClient.
type mBotServerClient struct {
	createCustomer *connect.Client[mbotpb.CreateCustomerRequest, mbotpb.CreateCustomerReply]
}

// CreateCustomer calls MBotServer.CreateCustomer.
func (c *mBotServerClient) CreateCustomer(ctx context.Context, req *connect.Request[mbotpb.CreateCustomerRequest]) (*connect.Response[mbotpb.CreateCustomerReply], error) {
	return c.createCustomer.CallUnary(ctx, req)
}

// MBotServerHandler is an implementation of the MBotServer service.
type MBotServerHandler interface {
	CreateCustomer(context.Context, *connect.Request[mbotpb.CreateCustomerRequest]) (*connect.Response[mbotpb.CreateCustomerReply], error)
}

// NewMBotServerHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMBotServerHandler(svc MBotServerHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	mBotServerCreateCustomerHandler := connect.NewUnaryHandler(
		MBotServerCreateCustomerProcedure,
		svc.CreateCustomer,
		connect.WithSchema(mBotServerCreateCustomerMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/MBotServer/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MBotServerCreateCustomerProcedure:
			mBotServerCreateCustomerHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMBotServerHandler returns CodeUnimplemented from all methods.
type UnimplementedMBotServerHandler struct{}

func (UnimplementedMBotServerHandler) CreateCustomer(context.Context, *connect.Request[mbotpb.CreateCustomerRequest]) (*connect.Response[mbotpb.CreateCustomerReply], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("MBotServer.CreateCustomer is not implemented"))
}
