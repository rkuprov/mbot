// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: service.proto

package mbotpbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	mbotpb "github.com/rkuprov/mbot/pkg/gen/mbotpb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MBotServerServiceName is the fully-qualified name of the MBotServerService service.
	MBotServerServiceName = "mbot.MBotServerService"
	// MbotAuthServerServiceName is the fully-qualified name of the MbotAuthServerService service.
	MbotAuthServerServiceName = "mbot.MbotAuthServerService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MBotServerServiceCreateCustomerProcedure is the fully-qualified name of the MBotServerService's
	// CreateCustomer RPC.
	MBotServerServiceCreateCustomerProcedure = "/mbot.MBotServerService/CreateCustomer"
	// MBotServerServiceGetCustomerProcedure is the fully-qualified name of the MBotServerService's
	// GetCustomer RPC.
	MBotServerServiceGetCustomerProcedure = "/mbot.MBotServerService/GetCustomer"
	// MBotServerServiceGetCustomersAllProcedure is the fully-qualified name of the MBotServerService's
	// GetCustomersAll RPC.
	MBotServerServiceGetCustomersAllProcedure = "/mbot.MBotServerService/GetCustomersAll"
	// MBotServerServiceUpdateCustomerProcedure is the fully-qualified name of the MBotServerService's
	// UpdateCustomer RPC.
	MBotServerServiceUpdateCustomerProcedure = "/mbot.MBotServerService/UpdateCustomer"
	// MBotServerServiceDeleteCustomerProcedure is the fully-qualified name of the MBotServerService's
	// DeleteCustomer RPC.
	MBotServerServiceDeleteCustomerProcedure = "/mbot.MBotServerService/DeleteCustomer"
	// MBotServerServiceCreateSubscriptionProcedure is the fully-qualified name of the
	// MBotServerService's CreateSubscription RPC.
	MBotServerServiceCreateSubscriptionProcedure = "/mbot.MBotServerService/CreateSubscription"
	// MBotServerServiceGetSubscriptionProcedure is the fully-qualified name of the MBotServerService's
	// GetSubscription RPC.
	MBotServerServiceGetSubscriptionProcedure = "/mbot.MBotServerService/GetSubscription"
	// MBotServerServiceGetSubscriptionsAllProcedure is the fully-qualified name of the
	// MBotServerService's GetSubscriptionsAll RPC.
	MBotServerServiceGetSubscriptionsAllProcedure = "/mbot.MBotServerService/GetSubscriptionsAll"
	// MBotServerServiceUpdateSubscriptionProcedure is the fully-qualified name of the
	// MBotServerService's UpdateSubscription RPC.
	MBotServerServiceUpdateSubscriptionProcedure = "/mbot.MBotServerService/UpdateSubscription"
	// MBotServerServiceDeleteSubscriptionProcedure is the fully-qualified name of the
	// MBotServerService's DeleteSubscription RPC.
	MBotServerServiceDeleteSubscriptionProcedure = "/mbot.MBotServerService/DeleteSubscription"
	// MBotServerServiceGetSubscriptionByCustomerProcedure is the fully-qualified name of the
	// MBotServerService's GetSubscriptionByCustomer RPC.
	MBotServerServiceGetSubscriptionByCustomerProcedure = "/mbot.MBotServerService/GetSubscriptionByCustomer"
	// MbotAuthServerServiceLoginProcedure is the fully-qualified name of the MbotAuthServerService's
	// Login RPC.
	MbotAuthServerServiceLoginProcedure = "/mbot.MbotAuthServerService/Login"
	// MbotAuthServerServiceRegisterProcedure is the fully-qualified name of the MbotAuthServerService's
	// Register RPC.
	MbotAuthServerServiceRegisterProcedure = "/mbot.MbotAuthServerService/Register"
	// MbotAuthServerServiceLogoutProcedure is the fully-qualified name of the MbotAuthServerService's
	// Logout RPC.
	MbotAuthServerServiceLogoutProcedure = "/mbot.MbotAuthServerService/Logout"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	mBotServerServiceServiceDescriptor                         = mbotpb.File_service_proto.Services().ByName("MBotServerService")
	mBotServerServiceCreateCustomerMethodDescriptor            = mBotServerServiceServiceDescriptor.Methods().ByName("CreateCustomer")
	mBotServerServiceGetCustomerMethodDescriptor               = mBotServerServiceServiceDescriptor.Methods().ByName("GetCustomer")
	mBotServerServiceGetCustomersAllMethodDescriptor           = mBotServerServiceServiceDescriptor.Methods().ByName("GetCustomersAll")
	mBotServerServiceUpdateCustomerMethodDescriptor            = mBotServerServiceServiceDescriptor.Methods().ByName("UpdateCustomer")
	mBotServerServiceDeleteCustomerMethodDescriptor            = mBotServerServiceServiceDescriptor.Methods().ByName("DeleteCustomer")
	mBotServerServiceCreateSubscriptionMethodDescriptor        = mBotServerServiceServiceDescriptor.Methods().ByName("CreateSubscription")
	mBotServerServiceGetSubscriptionMethodDescriptor           = mBotServerServiceServiceDescriptor.Methods().ByName("GetSubscription")
	mBotServerServiceGetSubscriptionsAllMethodDescriptor       = mBotServerServiceServiceDescriptor.Methods().ByName("GetSubscriptionsAll")
	mBotServerServiceUpdateSubscriptionMethodDescriptor        = mBotServerServiceServiceDescriptor.Methods().ByName("UpdateSubscription")
	mBotServerServiceDeleteSubscriptionMethodDescriptor        = mBotServerServiceServiceDescriptor.Methods().ByName("DeleteSubscription")
	mBotServerServiceGetSubscriptionByCustomerMethodDescriptor = mBotServerServiceServiceDescriptor.Methods().ByName("GetSubscriptionByCustomer")
	mbotAuthServerServiceServiceDescriptor                     = mbotpb.File_service_proto.Services().ByName("MbotAuthServerService")
	mbotAuthServerServiceLoginMethodDescriptor                 = mbotAuthServerServiceServiceDescriptor.Methods().ByName("Login")
	mbotAuthServerServiceRegisterMethodDescriptor              = mbotAuthServerServiceServiceDescriptor.Methods().ByName("Register")
	mbotAuthServerServiceLogoutMethodDescriptor                = mbotAuthServerServiceServiceDescriptor.Methods().ByName("Logout")
)

// MBotServerServiceClient is a client for the mbot.MBotServerService service.
type MBotServerServiceClient interface {
	CreateCustomer(context.Context, *connect.Request[mbotpb.CreateCustomerRequest]) (*connect.Response[mbotpb.CreateCustomerResponse], error)
	GetCustomer(context.Context, *connect.Request[mbotpb.GetCustomerRequest]) (*connect.Response[mbotpb.GetCustomerResponse], error)
	GetCustomersAll(context.Context, *connect.Request[mbotpb.GetCustomersAllRequest]) (*connect.Response[mbotpb.GetCustomersAllResponse], error)
	UpdateCustomer(context.Context, *connect.Request[mbotpb.UpdateCustomerRequest]) (*connect.Response[mbotpb.UpdateCustomerResponse], error)
	DeleteCustomer(context.Context, *connect.Request[mbotpb.DeleteCustomerRequest]) (*connect.Response[mbotpb.DeleteCustomerResponse], error)
	CreateSubscription(context.Context, *connect.Request[mbotpb.CreateSubscriptionRequest]) (*connect.Response[mbotpb.CreateSubscriptionResponse], error)
	GetSubscription(context.Context, *connect.Request[mbotpb.GetSubscriptionRequest]) (*connect.Response[mbotpb.GetSubscriptionResponse], error)
	GetSubscriptionsAll(context.Context, *connect.Request[mbotpb.GetSubscriptionsAllRequest]) (*connect.Response[mbotpb.GetSubscriptionsAllResponse], error)
	UpdateSubscription(context.Context, *connect.Request[mbotpb.UpdateSubscriptionRequest]) (*connect.Response[mbotpb.UpdateSubscriptionResponse], error)
	DeleteSubscription(context.Context, *connect.Request[mbotpb.DeleteSubscriptionRequest]) (*connect.Response[mbotpb.DeleteSubscriptionResponse], error)
	GetSubscriptionByCustomer(context.Context, *connect.Request[mbotpb.GetSubscriptionByCustomerRequest]) (*connect.Response[mbotpb.GetSubscriptionByCustomerResponse], error)
}

// NewMBotServerServiceClient constructs a client for the mbot.MBotServerService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMBotServerServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MBotServerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &mBotServerServiceClient{
		createCustomer: connect.NewClient[mbotpb.CreateCustomerRequest, mbotpb.CreateCustomerResponse](
			httpClient,
			baseURL+MBotServerServiceCreateCustomerProcedure,
			connect.WithSchema(mBotServerServiceCreateCustomerMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getCustomer: connect.NewClient[mbotpb.GetCustomerRequest, mbotpb.GetCustomerResponse](
			httpClient,
			baseURL+MBotServerServiceGetCustomerProcedure,
			connect.WithSchema(mBotServerServiceGetCustomerMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getCustomersAll: connect.NewClient[mbotpb.GetCustomersAllRequest, mbotpb.GetCustomersAllResponse](
			httpClient,
			baseURL+MBotServerServiceGetCustomersAllProcedure,
			connect.WithSchema(mBotServerServiceGetCustomersAllMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateCustomer: connect.NewClient[mbotpb.UpdateCustomerRequest, mbotpb.UpdateCustomerResponse](
			httpClient,
			baseURL+MBotServerServiceUpdateCustomerProcedure,
			connect.WithSchema(mBotServerServiceUpdateCustomerMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteCustomer: connect.NewClient[mbotpb.DeleteCustomerRequest, mbotpb.DeleteCustomerResponse](
			httpClient,
			baseURL+MBotServerServiceDeleteCustomerProcedure,
			connect.WithSchema(mBotServerServiceDeleteCustomerMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createSubscription: connect.NewClient[mbotpb.CreateSubscriptionRequest, mbotpb.CreateSubscriptionResponse](
			httpClient,
			baseURL+MBotServerServiceCreateSubscriptionProcedure,
			connect.WithSchema(mBotServerServiceCreateSubscriptionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getSubscription: connect.NewClient[mbotpb.GetSubscriptionRequest, mbotpb.GetSubscriptionResponse](
			httpClient,
			baseURL+MBotServerServiceGetSubscriptionProcedure,
			connect.WithSchema(mBotServerServiceGetSubscriptionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getSubscriptionsAll: connect.NewClient[mbotpb.GetSubscriptionsAllRequest, mbotpb.GetSubscriptionsAllResponse](
			httpClient,
			baseURL+MBotServerServiceGetSubscriptionsAllProcedure,
			connect.WithSchema(mBotServerServiceGetSubscriptionsAllMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateSubscription: connect.NewClient[mbotpb.UpdateSubscriptionRequest, mbotpb.UpdateSubscriptionResponse](
			httpClient,
			baseURL+MBotServerServiceUpdateSubscriptionProcedure,
			connect.WithSchema(mBotServerServiceUpdateSubscriptionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteSubscription: connect.NewClient[mbotpb.DeleteSubscriptionRequest, mbotpb.DeleteSubscriptionResponse](
			httpClient,
			baseURL+MBotServerServiceDeleteSubscriptionProcedure,
			connect.WithSchema(mBotServerServiceDeleteSubscriptionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getSubscriptionByCustomer: connect.NewClient[mbotpb.GetSubscriptionByCustomerRequest, mbotpb.GetSubscriptionByCustomerResponse](
			httpClient,
			baseURL+MBotServerServiceGetSubscriptionByCustomerProcedure,
			connect.WithSchema(mBotServerServiceGetSubscriptionByCustomerMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// mBotServerServiceClient implements MBotServerServiceClient.
type mBotServerServiceClient struct {
	createCustomer            *connect.Client[mbotpb.CreateCustomerRequest, mbotpb.CreateCustomerResponse]
	getCustomer               *connect.Client[mbotpb.GetCustomerRequest, mbotpb.GetCustomerResponse]
	getCustomersAll           *connect.Client[mbotpb.GetCustomersAllRequest, mbotpb.GetCustomersAllResponse]
	updateCustomer            *connect.Client[mbotpb.UpdateCustomerRequest, mbotpb.UpdateCustomerResponse]
	deleteCustomer            *connect.Client[mbotpb.DeleteCustomerRequest, mbotpb.DeleteCustomerResponse]
	createSubscription        *connect.Client[mbotpb.CreateSubscriptionRequest, mbotpb.CreateSubscriptionResponse]
	getSubscription           *connect.Client[mbotpb.GetSubscriptionRequest, mbotpb.GetSubscriptionResponse]
	getSubscriptionsAll       *connect.Client[mbotpb.GetSubscriptionsAllRequest, mbotpb.GetSubscriptionsAllResponse]
	updateSubscription        *connect.Client[mbotpb.UpdateSubscriptionRequest, mbotpb.UpdateSubscriptionResponse]
	deleteSubscription        *connect.Client[mbotpb.DeleteSubscriptionRequest, mbotpb.DeleteSubscriptionResponse]
	getSubscriptionByCustomer *connect.Client[mbotpb.GetSubscriptionByCustomerRequest, mbotpb.GetSubscriptionByCustomerResponse]
}

// CreateCustomer calls mbot.MBotServerService.CreateCustomer.
func (c *mBotServerServiceClient) CreateCustomer(ctx context.Context, req *connect.Request[mbotpb.CreateCustomerRequest]) (*connect.Response[mbotpb.CreateCustomerResponse], error) {
	return c.createCustomer.CallUnary(ctx, req)
}

// GetCustomer calls mbot.MBotServerService.GetCustomer.
func (c *mBotServerServiceClient) GetCustomer(ctx context.Context, req *connect.Request[mbotpb.GetCustomerRequest]) (*connect.Response[mbotpb.GetCustomerResponse], error) {
	return c.getCustomer.CallUnary(ctx, req)
}

// GetCustomersAll calls mbot.MBotServerService.GetCustomersAll.
func (c *mBotServerServiceClient) GetCustomersAll(ctx context.Context, req *connect.Request[mbotpb.GetCustomersAllRequest]) (*connect.Response[mbotpb.GetCustomersAllResponse], error) {
	return c.getCustomersAll.CallUnary(ctx, req)
}

// UpdateCustomer calls mbot.MBotServerService.UpdateCustomer.
func (c *mBotServerServiceClient) UpdateCustomer(ctx context.Context, req *connect.Request[mbotpb.UpdateCustomerRequest]) (*connect.Response[mbotpb.UpdateCustomerResponse], error) {
	return c.updateCustomer.CallUnary(ctx, req)
}

// DeleteCustomer calls mbot.MBotServerService.DeleteCustomer.
func (c *mBotServerServiceClient) DeleteCustomer(ctx context.Context, req *connect.Request[mbotpb.DeleteCustomerRequest]) (*connect.Response[mbotpb.DeleteCustomerResponse], error) {
	return c.deleteCustomer.CallUnary(ctx, req)
}

// CreateSubscription calls mbot.MBotServerService.CreateSubscription.
func (c *mBotServerServiceClient) CreateSubscription(ctx context.Context, req *connect.Request[mbotpb.CreateSubscriptionRequest]) (*connect.Response[mbotpb.CreateSubscriptionResponse], error) {
	return c.createSubscription.CallUnary(ctx, req)
}

// GetSubscription calls mbot.MBotServerService.GetSubscription.
func (c *mBotServerServiceClient) GetSubscription(ctx context.Context, req *connect.Request[mbotpb.GetSubscriptionRequest]) (*connect.Response[mbotpb.GetSubscriptionResponse], error) {
	return c.getSubscription.CallUnary(ctx, req)
}

// GetSubscriptionsAll calls mbot.MBotServerService.GetSubscriptionsAll.
func (c *mBotServerServiceClient) GetSubscriptionsAll(ctx context.Context, req *connect.Request[mbotpb.GetSubscriptionsAllRequest]) (*connect.Response[mbotpb.GetSubscriptionsAllResponse], error) {
	return c.getSubscriptionsAll.CallUnary(ctx, req)
}

// UpdateSubscription calls mbot.MBotServerService.UpdateSubscription.
func (c *mBotServerServiceClient) UpdateSubscription(ctx context.Context, req *connect.Request[mbotpb.UpdateSubscriptionRequest]) (*connect.Response[mbotpb.UpdateSubscriptionResponse], error) {
	return c.updateSubscription.CallUnary(ctx, req)
}

// DeleteSubscription calls mbot.MBotServerService.DeleteSubscription.
func (c *mBotServerServiceClient) DeleteSubscription(ctx context.Context, req *connect.Request[mbotpb.DeleteSubscriptionRequest]) (*connect.Response[mbotpb.DeleteSubscriptionResponse], error) {
	return c.deleteSubscription.CallUnary(ctx, req)
}

// GetSubscriptionByCustomer calls mbot.MBotServerService.GetSubscriptionByCustomer.
func (c *mBotServerServiceClient) GetSubscriptionByCustomer(ctx context.Context, req *connect.Request[mbotpb.GetSubscriptionByCustomerRequest]) (*connect.Response[mbotpb.GetSubscriptionByCustomerResponse], error) {
	return c.getSubscriptionByCustomer.CallUnary(ctx, req)
}

// MBotServerServiceHandler is an implementation of the mbot.MBotServerService service.
type MBotServerServiceHandler interface {
	CreateCustomer(context.Context, *connect.Request[mbotpb.CreateCustomerRequest]) (*connect.Response[mbotpb.CreateCustomerResponse], error)
	GetCustomer(context.Context, *connect.Request[mbotpb.GetCustomerRequest]) (*connect.Response[mbotpb.GetCustomerResponse], error)
	GetCustomersAll(context.Context, *connect.Request[mbotpb.GetCustomersAllRequest]) (*connect.Response[mbotpb.GetCustomersAllResponse], error)
	UpdateCustomer(context.Context, *connect.Request[mbotpb.UpdateCustomerRequest]) (*connect.Response[mbotpb.UpdateCustomerResponse], error)
	DeleteCustomer(context.Context, *connect.Request[mbotpb.DeleteCustomerRequest]) (*connect.Response[mbotpb.DeleteCustomerResponse], error)
	CreateSubscription(context.Context, *connect.Request[mbotpb.CreateSubscriptionRequest]) (*connect.Response[mbotpb.CreateSubscriptionResponse], error)
	GetSubscription(context.Context, *connect.Request[mbotpb.GetSubscriptionRequest]) (*connect.Response[mbotpb.GetSubscriptionResponse], error)
	GetSubscriptionsAll(context.Context, *connect.Request[mbotpb.GetSubscriptionsAllRequest]) (*connect.Response[mbotpb.GetSubscriptionsAllResponse], error)
	UpdateSubscription(context.Context, *connect.Request[mbotpb.UpdateSubscriptionRequest]) (*connect.Response[mbotpb.UpdateSubscriptionResponse], error)
	DeleteSubscription(context.Context, *connect.Request[mbotpb.DeleteSubscriptionRequest]) (*connect.Response[mbotpb.DeleteSubscriptionResponse], error)
	GetSubscriptionByCustomer(context.Context, *connect.Request[mbotpb.GetSubscriptionByCustomerRequest]) (*connect.Response[mbotpb.GetSubscriptionByCustomerResponse], error)
}

// NewMBotServerServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMBotServerServiceHandler(svc MBotServerServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	mBotServerServiceCreateCustomerHandler := connect.NewUnaryHandler(
		MBotServerServiceCreateCustomerProcedure,
		svc.CreateCustomer,
		connect.WithSchema(mBotServerServiceCreateCustomerMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	mBotServerServiceGetCustomerHandler := connect.NewUnaryHandler(
		MBotServerServiceGetCustomerProcedure,
		svc.GetCustomer,
		connect.WithSchema(mBotServerServiceGetCustomerMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	mBotServerServiceGetCustomersAllHandler := connect.NewUnaryHandler(
		MBotServerServiceGetCustomersAllProcedure,
		svc.GetCustomersAll,
		connect.WithSchema(mBotServerServiceGetCustomersAllMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	mBotServerServiceUpdateCustomerHandler := connect.NewUnaryHandler(
		MBotServerServiceUpdateCustomerProcedure,
		svc.UpdateCustomer,
		connect.WithSchema(mBotServerServiceUpdateCustomerMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	mBotServerServiceDeleteCustomerHandler := connect.NewUnaryHandler(
		MBotServerServiceDeleteCustomerProcedure,
		svc.DeleteCustomer,
		connect.WithSchema(mBotServerServiceDeleteCustomerMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	mBotServerServiceCreateSubscriptionHandler := connect.NewUnaryHandler(
		MBotServerServiceCreateSubscriptionProcedure,
		svc.CreateSubscription,
		connect.WithSchema(mBotServerServiceCreateSubscriptionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	mBotServerServiceGetSubscriptionHandler := connect.NewUnaryHandler(
		MBotServerServiceGetSubscriptionProcedure,
		svc.GetSubscription,
		connect.WithSchema(mBotServerServiceGetSubscriptionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	mBotServerServiceGetSubscriptionsAllHandler := connect.NewUnaryHandler(
		MBotServerServiceGetSubscriptionsAllProcedure,
		svc.GetSubscriptionsAll,
		connect.WithSchema(mBotServerServiceGetSubscriptionsAllMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	mBotServerServiceUpdateSubscriptionHandler := connect.NewUnaryHandler(
		MBotServerServiceUpdateSubscriptionProcedure,
		svc.UpdateSubscription,
		connect.WithSchema(mBotServerServiceUpdateSubscriptionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	mBotServerServiceDeleteSubscriptionHandler := connect.NewUnaryHandler(
		MBotServerServiceDeleteSubscriptionProcedure,
		svc.DeleteSubscription,
		connect.WithSchema(mBotServerServiceDeleteSubscriptionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	mBotServerServiceGetSubscriptionByCustomerHandler := connect.NewUnaryHandler(
		MBotServerServiceGetSubscriptionByCustomerProcedure,
		svc.GetSubscriptionByCustomer,
		connect.WithSchema(mBotServerServiceGetSubscriptionByCustomerMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/mbot.MBotServerService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MBotServerServiceCreateCustomerProcedure:
			mBotServerServiceCreateCustomerHandler.ServeHTTP(w, r)
		case MBotServerServiceGetCustomerProcedure:
			mBotServerServiceGetCustomerHandler.ServeHTTP(w, r)
		case MBotServerServiceGetCustomersAllProcedure:
			mBotServerServiceGetCustomersAllHandler.ServeHTTP(w, r)
		case MBotServerServiceUpdateCustomerProcedure:
			mBotServerServiceUpdateCustomerHandler.ServeHTTP(w, r)
		case MBotServerServiceDeleteCustomerProcedure:
			mBotServerServiceDeleteCustomerHandler.ServeHTTP(w, r)
		case MBotServerServiceCreateSubscriptionProcedure:
			mBotServerServiceCreateSubscriptionHandler.ServeHTTP(w, r)
		case MBotServerServiceGetSubscriptionProcedure:
			mBotServerServiceGetSubscriptionHandler.ServeHTTP(w, r)
		case MBotServerServiceGetSubscriptionsAllProcedure:
			mBotServerServiceGetSubscriptionsAllHandler.ServeHTTP(w, r)
		case MBotServerServiceUpdateSubscriptionProcedure:
			mBotServerServiceUpdateSubscriptionHandler.ServeHTTP(w, r)
		case MBotServerServiceDeleteSubscriptionProcedure:
			mBotServerServiceDeleteSubscriptionHandler.ServeHTTP(w, r)
		case MBotServerServiceGetSubscriptionByCustomerProcedure:
			mBotServerServiceGetSubscriptionByCustomerHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMBotServerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMBotServerServiceHandler struct{}

func (UnimplementedMBotServerServiceHandler) CreateCustomer(context.Context, *connect.Request[mbotpb.CreateCustomerRequest]) (*connect.Response[mbotpb.CreateCustomerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mbot.MBotServerService.CreateCustomer is not implemented"))
}

func (UnimplementedMBotServerServiceHandler) GetCustomer(context.Context, *connect.Request[mbotpb.GetCustomerRequest]) (*connect.Response[mbotpb.GetCustomerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mbot.MBotServerService.GetCustomer is not implemented"))
}

func (UnimplementedMBotServerServiceHandler) GetCustomersAll(context.Context, *connect.Request[mbotpb.GetCustomersAllRequest]) (*connect.Response[mbotpb.GetCustomersAllResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mbot.MBotServerService.GetCustomersAll is not implemented"))
}

func (UnimplementedMBotServerServiceHandler) UpdateCustomer(context.Context, *connect.Request[mbotpb.UpdateCustomerRequest]) (*connect.Response[mbotpb.UpdateCustomerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mbot.MBotServerService.UpdateCustomer is not implemented"))
}

func (UnimplementedMBotServerServiceHandler) DeleteCustomer(context.Context, *connect.Request[mbotpb.DeleteCustomerRequest]) (*connect.Response[mbotpb.DeleteCustomerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mbot.MBotServerService.DeleteCustomer is not implemented"))
}

func (UnimplementedMBotServerServiceHandler) CreateSubscription(context.Context, *connect.Request[mbotpb.CreateSubscriptionRequest]) (*connect.Response[mbotpb.CreateSubscriptionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mbot.MBotServerService.CreateSubscription is not implemented"))
}

func (UnimplementedMBotServerServiceHandler) GetSubscription(context.Context, *connect.Request[mbotpb.GetSubscriptionRequest]) (*connect.Response[mbotpb.GetSubscriptionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mbot.MBotServerService.GetSubscription is not implemented"))
}

func (UnimplementedMBotServerServiceHandler) GetSubscriptionsAll(context.Context, *connect.Request[mbotpb.GetSubscriptionsAllRequest]) (*connect.Response[mbotpb.GetSubscriptionsAllResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mbot.MBotServerService.GetSubscriptionsAll is not implemented"))
}

func (UnimplementedMBotServerServiceHandler) UpdateSubscription(context.Context, *connect.Request[mbotpb.UpdateSubscriptionRequest]) (*connect.Response[mbotpb.UpdateSubscriptionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mbot.MBotServerService.UpdateSubscription is not implemented"))
}

func (UnimplementedMBotServerServiceHandler) DeleteSubscription(context.Context, *connect.Request[mbotpb.DeleteSubscriptionRequest]) (*connect.Response[mbotpb.DeleteSubscriptionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mbot.MBotServerService.DeleteSubscription is not implemented"))
}

func (UnimplementedMBotServerServiceHandler) GetSubscriptionByCustomer(context.Context, *connect.Request[mbotpb.GetSubscriptionByCustomerRequest]) (*connect.Response[mbotpb.GetSubscriptionByCustomerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mbot.MBotServerService.GetSubscriptionByCustomer is not implemented"))
}

// MbotAuthServerServiceClient is a client for the mbot.MbotAuthServerService service.
type MbotAuthServerServiceClient interface {
	Login(context.Context, *connect.Request[mbotpb.LoginRequest]) (*connect.Response[mbotpb.LoginResponse], error)
	Register(context.Context, *connect.Request[mbotpb.RegisterRequest]) (*connect.Response[mbotpb.RegisterResponse], error)
	Logout(context.Context, *connect.Request[mbotpb.LogoutRequest]) (*connect.Response[mbotpb.LogoutResponse], error)
}

// NewMbotAuthServerServiceClient constructs a client for the mbot.MbotAuthServerService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMbotAuthServerServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MbotAuthServerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &mbotAuthServerServiceClient{
		login: connect.NewClient[mbotpb.LoginRequest, mbotpb.LoginResponse](
			httpClient,
			baseURL+MbotAuthServerServiceLoginProcedure,
			connect.WithSchema(mbotAuthServerServiceLoginMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		register: connect.NewClient[mbotpb.RegisterRequest, mbotpb.RegisterResponse](
			httpClient,
			baseURL+MbotAuthServerServiceRegisterProcedure,
			connect.WithSchema(mbotAuthServerServiceRegisterMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		logout: connect.NewClient[mbotpb.LogoutRequest, mbotpb.LogoutResponse](
			httpClient,
			baseURL+MbotAuthServerServiceLogoutProcedure,
			connect.WithSchema(mbotAuthServerServiceLogoutMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// mbotAuthServerServiceClient implements MbotAuthServerServiceClient.
type mbotAuthServerServiceClient struct {
	login    *connect.Client[mbotpb.LoginRequest, mbotpb.LoginResponse]
	register *connect.Client[mbotpb.RegisterRequest, mbotpb.RegisterResponse]
	logout   *connect.Client[mbotpb.LogoutRequest, mbotpb.LogoutResponse]
}

// Login calls mbot.MbotAuthServerService.Login.
func (c *mbotAuthServerServiceClient) Login(ctx context.Context, req *connect.Request[mbotpb.LoginRequest]) (*connect.Response[mbotpb.LoginResponse], error) {
	return c.login.CallUnary(ctx, req)
}

// Register calls mbot.MbotAuthServerService.Register.
func (c *mbotAuthServerServiceClient) Register(ctx context.Context, req *connect.Request[mbotpb.RegisterRequest]) (*connect.Response[mbotpb.RegisterResponse], error) {
	return c.register.CallUnary(ctx, req)
}

// Logout calls mbot.MbotAuthServerService.Logout.
func (c *mbotAuthServerServiceClient) Logout(ctx context.Context, req *connect.Request[mbotpb.LogoutRequest]) (*connect.Response[mbotpb.LogoutResponse], error) {
	return c.logout.CallUnary(ctx, req)
}

// MbotAuthServerServiceHandler is an implementation of the mbot.MbotAuthServerService service.
type MbotAuthServerServiceHandler interface {
	Login(context.Context, *connect.Request[mbotpb.LoginRequest]) (*connect.Response[mbotpb.LoginResponse], error)
	Register(context.Context, *connect.Request[mbotpb.RegisterRequest]) (*connect.Response[mbotpb.RegisterResponse], error)
	Logout(context.Context, *connect.Request[mbotpb.LogoutRequest]) (*connect.Response[mbotpb.LogoutResponse], error)
}

// NewMbotAuthServerServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMbotAuthServerServiceHandler(svc MbotAuthServerServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	mbotAuthServerServiceLoginHandler := connect.NewUnaryHandler(
		MbotAuthServerServiceLoginProcedure,
		svc.Login,
		connect.WithSchema(mbotAuthServerServiceLoginMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	mbotAuthServerServiceRegisterHandler := connect.NewUnaryHandler(
		MbotAuthServerServiceRegisterProcedure,
		svc.Register,
		connect.WithSchema(mbotAuthServerServiceRegisterMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	mbotAuthServerServiceLogoutHandler := connect.NewUnaryHandler(
		MbotAuthServerServiceLogoutProcedure,
		svc.Logout,
		connect.WithSchema(mbotAuthServerServiceLogoutMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/mbot.MbotAuthServerService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MbotAuthServerServiceLoginProcedure:
			mbotAuthServerServiceLoginHandler.ServeHTTP(w, r)
		case MbotAuthServerServiceRegisterProcedure:
			mbotAuthServerServiceRegisterHandler.ServeHTTP(w, r)
		case MbotAuthServerServiceLogoutProcedure:
			mbotAuthServerServiceLogoutHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMbotAuthServerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMbotAuthServerServiceHandler struct{}

func (UnimplementedMbotAuthServerServiceHandler) Login(context.Context, *connect.Request[mbotpb.LoginRequest]) (*connect.Response[mbotpb.LoginResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mbot.MbotAuthServerService.Login is not implemented"))
}

func (UnimplementedMbotAuthServerServiceHandler) Register(context.Context, *connect.Request[mbotpb.RegisterRequest]) (*connect.Response[mbotpb.RegisterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mbot.MbotAuthServerService.Register is not implemented"))
}

func (UnimplementedMbotAuthServerServiceHandler) Logout(context.Context, *connect.Request[mbotpb.LogoutRequest]) (*connect.Response[mbotpb.LogoutResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mbot.MbotAuthServerService.Logout is not implemented"))
}
